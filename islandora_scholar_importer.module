<?php

/**
 * Implements hook_menu().
 */
function islandora_scholar_importer_menu() {
  return array(
    'islandora/object/%islandora_object/scholar_import' => array(
      'title' => 'Scholar Batch Import',
      'type' => MENU_CALLBACK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('islandora_scholar_importer_form', 2),
      'access callback' => 'islandora_scholar_importer_access_callback',
      'access arguments' => array(2),
    ),
  );
}

/**
 * Wrap a module_invoke_all() call.
 */
function islandora_scholar_importer_get_options() {
  return module_invoke_all('islandora_scholar_importer');
}

/**
 * Access callback for menu path.
 */
function islandora_scholar_importer_access_callback($object) {
  if (!$object) {
    return FALSE;
  }

  return ((count(islandora_scholar_importer_get_options()) > 0) &&
    user_access(FEDORA_INGEST));
}

/**
 * Implements hook_islandora_ingest_registry().
 */
function islandora_scholar_importer_islandora_ingest_registry($object) {
  $reg = array();
  
  if (count(islandora_scholar_importer_get_options()) > 0) {
    $reg[] = array(
      'name' => 'Scholar Batch Import',
      'url' => "islandora/object/{$object->id}/scholar_import",
      'weight' => 1,
    );
  }

  return $reg;
}

/**
 * Multi-step form builder.
 *
 * Initially, allows the user to select an importer; when a selection has been
 * made, get the form from the "batch class".
 *
 * @param array $form
 * @param array $form_state
 *   A reference to the array containing the form state.
 * @param AbstractFedoraObject
 *   A string containing the Fedora collection PID into which we will import
 *   citations.
 *
 * @return array
 *   An array describing the form structure.
 */
function islandora_scholar_importer_form($form, &$form_state, $object) { // $parent_pid = NULL, $options = NULL) {
  dsm($form_state, 'fs');

  if (isset($form_state['storage']['importer'])) {
    //Importers need something like:
    //
    // The first three correspond the the parameters to module_load_include,
    //   and the class is one which extends IslandoraScholarBatchImporter
    //   (which is defined in islandora_scholar_importer.inc)
    extract($form_state['storage']['importer']);
    module_load_include('inc', 'islandora_scholar_importer');
    module_load_include($type, $module, $file);
    if (is_subclass_of($class, 'IslandoraScholarBatchImporter')) {
      return $class::get_form($form_state);
    }
    else {
      drupal_set_message(t('The %title importer does not correctly subclass' .
        ' IslandoraScholarBatchImporter...  Inform the particular importer module\'s ' .
        'maintainer!', array('%title' => $title)), 'error');
      unset($form_state['storage']['options'][$form_state['storage']['importer_name']]);
      unset($form_state['storage']['importer']);
    }
  }

  if (!isset($form_state['storage']['importer'])) {
    $options = islandora_scholar_importer_get_options();
    if (!isset($form_state['storage']['options'])) {
      $form_state['storage']['options'] = $options;
    }
    if (count($options) > 0) {
      $ops = array();
      foreach (array_keys($options) as $op) {
        $ops[$op] = $options[$op]['title'];
      }

      if (!isset($form_state['storage']['parent_pid'])) {
        $form_state['storage']['parent_pid'] = $object->id;
      }

      $form = array_merge($form, array(
        'importer' => array(
          '#type' => 'select',
          '#title' => t('Importer'),
          '#description' => t('Select which importer to use.'),
          '#options' => $ops,
        ),
        'submit' => array(
          '#type' => 'submit',
          '#value' => t('Submit'),
        ),
      ));

      return $form;
    }
    else {
      drupal_set_message(t('There are no valid importer plugins enabled.'), 'error');
      return $form;
    }
  }
}

/**
 * Default batch form submit handler.
 *
 * If we do not have an importer (we're selecting one), save the selection into
 * storage.
 * If we do (and are of course not being overridden by the form from an
 * individual importer plugin), we ask the batch class if we have what they need,
 * (providing them with the form state to check) and if so, ask for them to
 * package up what they need into a serializable format to pass along in a
 * batch operation and finally kick off the batch process.
 *
 * @param $form
 *   An array containing the form structure.
 * @param $form_state
 *   An array containing the form state.
 */
function islandora_scholar_importer_form_submit(&$form, &$form_state) {
  if (isset($form_state['storage']['importer'])) {
    extract($form_state['storage']['importer']);
    module_load_include('inc', 'islandora_scholar_importer');
    module_load_include($type, $module, $file);
    if (is_subclass_of($class, 'IslandoraScholarBatchImporter') && $class::ready_for_batch($form_state)) {
      $batch = array(
        'title' => t('Islandora Scholar Batch Import'),
        'operations' => array(),
        'finished' => 'islandora_scholar_importer_batch_finished',
      );

      $batch['operations'][] = array(
        'islandora_scholar_importer_run_batch', array(
          $form_state['storage']['importer'],
          $class::get_batch_info($form_state),
          $form_state['storage']['parent_pid'],
        )
      );

      //XXX: Allow modules to alter...  Don't know if this is really a good idea or not.
      drupal_alter('islandora_scholar_importer_batch', $batch);

      //Set and start the batch.
      batch_set($batch);
      batch_process();
    }
  }
  else {
    $importer_name = $form_state['values']['importer'];
    $form_state['storage']['importer_name'] = $importer_name;
    $form_state['storage']['importer'] = $form_state['storage']['options'][$importer_name];

    if (!isset($form_state['storage']['parent_pid'])) {
      $form_state['storage']['parent_pid'] = $form_state['values']['parent_pid'];
    }
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Callback actually used as the batch operation.
 *
 * XXX:  This function shouldn't really be necessary, but is due to Drupal.
 *   If "is_callable" was used (in _batch_process, I believe?), we could pass
 *   along a (serializable) instantition of the importer class and the name
 *   of the method to call on it...  Instead, we need to pass the name of
 *   a function due to the use of "function_exists".
 * @param $class_info
 *   The associative array defining where to find the importer class.
 * @param $import_info
 *   The data with which to instantiate the importer class.
 * @param $parent_pid
 *   A string containing a Fedora collection PID, into which objects should
 *   imported.
 * @param $context
 *   An array containing the Drupal batch context.
 */
function islandora_scholar_importer_run_batch($class_info, $import_info, $parent_pid, &$context) {
  extract($class_info);
  module_load_include('inc', 'islandora_scholar_importer');
  module_load_include($type, $module, $file);

  // XXX:  Bit of a hack, as batch parameters cannot be references.
  if (!isset($context['results']['islandora_scholar_importer']['import_info'])) {
    $context['results']['islandora_scholar_importer']['import_info'] = $import_info;
  }
  $import_info = &$context['results']['islandora_scholar_importer']['import_info'];

  if (is_subclass_of($class, 'IslandoraScholarBatchImporter')) {
    $instance = new $class($import_info, $parent_pid, $context);
    $instance->run_batch();
  }
}

/**
 * Batch finished callback.
 *
 * Dumps all results on success, informs of failed operations on failure.
 * (via drupal_set_message).
 *
 * @param $success
 *   A boolean indicating success
 * @param $results
 *   An array of results (from the $context['results']
 * @param $ops
 *   An array of failed operations.
 */
function islandora_scholar_importer_batch_finished($success, $results, $ops) {
  if ($success) {
    // XXX: Remove some of our "stored" values.
    unset($results['pid_cache']);
    unset($results['islandora_scholar_importer']);

   

    $filename = file_create_filename('batch_import_results.html', file_directory_path());
    $file = fopen($filename, 'w');
    fputs($file, '<html><body><ol>');
    $levels = watchdog_severity_levels();
    foreach ($results as $result) {
      $message = $result[0];
      $subs = (array)$result[1];
      $level = (isset($result[2]) && array_key_exists($result[2], $levels))?
        $result[2]:
        WATCHDOG_INFO;
      $link = isset($result[3])?
        $result[3]:
        '';

      fputs($file, '<li>' . $levels[$level] . ': ' . t($message, $subs) . ((!empty($link))?
        ('  ' . t('Link: !link.', array('!link' => $link))):
        '') . "</li>");

      array_unshift($result, 'islandora_scholar_importer');
      call_user_func_array('watchdog', $result);
    }
    fputs($file, '</ol></body></html>');
    fclose($file);

    if (user_access('access site reports')) {
      drupal_set_message(t('Batch complete!  View/Download !results or see the !watchdog for details.', array(
        '!results' => l(t('simple results'), file_create_url($filename)),
        '!watchdog' => l(t('watchdog log'), 'admin/reports/dblog'),
      )), 'info');
    }
    else {
      drupal_set_message(t('Batch complete!  View/Download !results.', array(
        '!results' => l(t('simple results'), file_create_url($filename)),
      )), 'info');
    }
  }
  else {
    drupal_set_message("Failed operations: " . print_r($ops, TRUE), 'error');
  }
}
